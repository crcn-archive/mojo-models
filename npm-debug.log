0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.24
3 info using node@v0.10.30
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/craig/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/craig/.npm/mojo-models/0.3.3/package.tgz', '.' ]
11 verbose tarball /Users/craig/.npm/mojo-models/0.3.3/package.tgz
12 verbose folder .
13 info prepublish mojo-models@0.3.3
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/craig/.npm/1f1177db-tar.lock
16 silly lockFile ef866822-pm-mojo-models-0-3-3-package-tgz tar:///Users/craig/.npm/mojo-models/0.3.3/package.tgz
17 verbose lock tar:///Users/craig/.npm/mojo-models/0.3.3/package.tgz /Users/craig/.npm/ef866822-pm-mojo-models-0-3-3-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile ef866822-pm-mojo-models-0-3-3-package-tgz tar:///Users/craig/.npm/mojo-models/0.3.3/package.tgz
21 silly lockFile ef866822-pm-mojo-models-0-3-3-package-tgz tar:///Users/craig/.npm/mojo-models/0.3.3/package.tgz
22 silly lockFile f3e28029-ig-npm-mojo-models-0-3-3-package /Users/craig/.npm/mojo-models/0.3.3/package
23 verbose lock /Users/craig/.npm/mojo-models/0.3.3/package /Users/craig/.npm/f3e28029-ig-npm-mojo-models-0-3-3-package.lock
24 silly lockFile f3e28029-ig-npm-mojo-models-0-3-3-package /Users/craig/.npm/mojo-models/0.3.3/package
25 silly lockFile f3e28029-ig-npm-mojo-models-0-3-3-package /Users/craig/.npm/mojo-models/0.3.3/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'mojo-models',
28 silly publish   version: '0.3.3',
28 silly publish   description: 'mojo-models ===========',
28 silly publish   main: './lib/index.js',
28 silly publish   scripts: { test: 'mocha' },
28 silly publish   repository: { type: 'git', url: 'https://github.com/mojo-js/mojo-models' },
28 silly publish   author: '',
28 silly publish   license: 'ISC',
28 silly publish   bugs: { url: 'https://github.com/classdojo/mojo-models/issues' },
28 silly publish   homepage: 'https://github.com/classdojo/mojo-models',
28 silly publish   devDependencies: { 'expect.js': '^0.3.1', mocha: '^1.20.1', benchmark: '^1.0.0' },
28 silly publish   dependencies:
28 silly publish    { bindable: '0.6.x',
28 silly publish      frills: '0.0.x',
28 silly publish      'mojo-application': '0.1.x',
28 silly publish      'mojo-registered-classes': '0.0.x',
28 silly publish      lodash: '2.4.1',
28 silly publish      janitorjs: '0.0.x',
28 silly publish      'bindable-decor-bindings': '0.1.x',
28 silly publish      hurryup: '0.0.x',
28 silly publish      async: '0.7.x' },
28 silly publish   readme: '[![Build Status](https://travis-ci.org/classdojo/mojo-models.svg)](https://travis-ci.org/classdojo/mojo-models)\n\nModels, like views, are plugin-based, meaning you can customize how models behave based on the properties defined in the class. You can also create your own plugins for models. By default, mojo-models come with a few: persist, virtuals, and bindings. \n\n### Installation\n\n```\nnpm install mojo-models\n```\n\n### Features\n\n- easy to extend. register your own custom plugins to extend the functionality of models.\n\n### Examples\n\n- https://github.com/mojo-js/mojo-todomvc-example\n- [deserializing data](http://requirebin.com/?gist=d174776852d4f1a13bc4)\n- [loading models](http://requirebin.com/?gist=ef4c57b8004501d15447)\n- [collections](http://requirebin.com/?gist=516f703d3eeb719940a1)\n\n\n### See Also\n\n- [bindable.js](https://github.com/classdojo/bindable.js) - base class for models & collections\n- [mojo-application](https://github.com/mojo-js/mojo-application) - entry point to application\n\n## API\n\n### Base(properties[, [application](https://github.com/mojo-js/mojo-application)])\n\nExtends [bindable.Object](https://github.com/mojo-js/bindable.js)\n\nbase model constructor\n\n- `properties` - properties to set on the model\n- `application` - (optional) mojo application\n\n```javascript\nvar models = require("mojo-models");\nvar model = new models.Base({ message: "Hello world!" });\nconsole.log(model.message);\n```\n\n#### base.data\n\nThe raw data set on the model - this is usually transformed into something the model can \nuse via `deserialize`. \n\n```javascript\nvar model = new models.Base({ data: { message: "Hello world!" }});\nconsol.log(model.message); // Hello world!\nconsole.log(model.data); // { message: "Hello world!" }\n```\n\n#### base.deserialize(data)\n\ndeserializes data once `data` is set on the model\n\nExample: http://requirebin.com/?gist=d174776852d4f1a13bc4\n\n```javascript\n\n\nvar Person = models.Base.extend({\n  deserialize: (data) {\n    return {\n      firstName: data.firstName,\n      lastName: data.lastName,\n      fullName: data.firstName + " " + data.lastName\n    };\n  }\n});\n\nvar person = new Person({\n  data: {\n    firstName: "Craig",\n    lastName: "Condon"\n  }\n});\n\nconsole.log(person.fullName); // Craig Condon\n\nperson.set("data", { \n  firstName: "A",\n  lastName: "B"\n});\n\nconsole.log(person.fullName); // A B\n```\n\n#### base.serialize()\n\nserializes data. This is an alias to `toJSON`\n\n### Collection(properties[, [application](https://github.com/mojo-js/mojo-application)])\n\nExtends [bindable.Collection](https://github.com/mojo-js/bindable.js)\n\n#### collection.data\n\nthe raw source for the collection. Should be an array.\n\n```javascript\nvar Models = Collection.extend({\n  createModel: function (properties) {\n    return new models.Base(properties, this.application);\n  }\n});\n\nvar models = new Models();\n\nmodels.set("data", [{ name: "a" }, { name: "b" }]);\n\nconsole.log(models.length); // 2\n```\n\n#### model collection.createModel(options)\n\nCreates a model. This method is usually defined when extending the base collection. It\'s also \ncalled when deserializing each item in `data`.\n\n```javascript\nvar Friend = models.Base.extend({\n});\n\nvar Friends = models.Collection.extend({\n  createModel: function (properties) {\n    return new Friend(properties, this.application);\n  }\n});\n\nvar friends = new Friends();\nvar friend = friends.create({ firstName: "John" });\n\nconsole.log(friend.firstName); // John\nconsole.log(friends.length); // 1\n```\n\n#### model collection.create(properties)\n\ncreates a new model, and adds to the collection immediately. See example above.\n\n\n## Built-in plugins\n\n### persist\n\nPersistence layer for models / collections. Also adds the methods `load`, `save`, and `remove`.\n\n```javascript\nvar superagent = require("superagent");\n\nvar Person = models.Base.extend({\n  persist: {\n    load: function (onLoad) {\n      superagent.get("/people/" + this._id).end(onLoad);\n    },\n    remove: function (onRemove) {\n      superagent.del("/people/" + this._id).end(onRemove);\n    },\n    save: function (onSave) {\n      if (this._id) {\n        superagent.put("/people/" + this._id).body(this.serialize()).end(onSave);\n      } else {\n        superagent.post("/people").body(this.serialize()).end(onSave);\n      }\n    }\n  },\n  serialize: function () {\n    return {\n      firstName: this.firstName,\n      lastName: this.lastName\n    };\n  }\n});\n\nvar person = new Person({ _id: "person1" });\n\nperson.set("firstName", "Craig");\n\nperson.save(); // POST /people/person1 { firstName: "Craig" }\nperson.load(); // loads the s \nperson.remove(); // removes the model\n```\n\n#### persistable.load(onLoad)\n\ncalls the `persist.load` function, and sets result to `data` to be deserialized on the model. Note that\nload can be called only once. Use `reload` to reload the model\n\n#### persistable.reload(onReload)\n\nreloads the model\n\n#### persistable.save(onSave)\n\ncalls the `persist.save` function, and sets result to `data` to be deserialized on the model.\n\n#### persistable.remove(onRemove)\n\nremoves the model\n\n#### persistable events\n\n- `willSave` - emitted when the model is about to be saved\n- `didSave` - emitted when the model has been saved\n- `willRemove` - emitted when the model is about to be removed\n- `didRemove` - emitted when the model has been removed\n\n\nremoves the model\n\n### virtuals\n\nVirtual properties all you to load external resources as they\'re needed. This is especially useful when\ndata-binding models to views.\n\n\n```javascript\n\nvar superagent = require("superagent");\n\nvar Friends = models.Collection.extend({\n\n  // creates a new person for each item in .data\n  createModel: function (options) {\n    return new Person(options, this.application);\n  },\n  persist: {\n  \n    // executed when .load, or .reload is called\n    load: function (complete) {\n      superagent.get("/person/" + this.friendee._id + "/friends").end(function (err, result) {\n        complete(null, result);\n      });  \n    }\n  }\n});\n\nvar Person = models.Base.extend({\n  virtuals: {\n  \n    // triggered on bind()\n    friends: function (onLoad) {\n      new Friends({ friendee: this }).load(onLoad);\n    }\n  }\n});\n\nvar person = new Person({ _id: "person1" });\n\nconsole.log(person.get("friends")); // should be undefined\n\n// activates virtual property, and calls /person/person1/friends API\nperson.bind("friends", function (friends) {\n  this.dispose(); // dispose the binding immediately\n  \n});\n\n```\n\n### bindings\n\nBindings allow you to compute properties on models.\n\n```javascript\n\nvar bindable = require("bindable");\n\nvar Person = models.Base.extend({\n  bindings: {\n    "firstName, lastName": function (firstName, lastName) {\n      this.set("fullName", firstName + " "+ lastName);\n    }\n  }\n\nvar person = new Person({ firstName: "A", lastName: "B" });\nconsole.log(person.fullName); // \ndocument.body.appendChild(person.render());\n```\n\n\n## Application API\n\n#### views(application)\n\nregisters `mojo-models` to the [mojo-application](https://github.com/mojo-js/mojo-application), which will add a few properties\n/ methods onto the application.\n\n```javascript\nvar Application = require("mojo-application"),\nmodels         = require("mojo-models");\n\nvar app = new Application();\napp.use(models);\n```\n\n#### application.models.register(modelNameOrClasses[, class])\n\nRegisters a model class that\'s accessible anywhere in the application. \n\n`modelNameOrClasses` - view name to register, or an object of classses to register\n`class` - the class to register\n\n```javascript\n\nvar app = new Application();\n\napp.use(require("mojo-models"));\n\n// register views one at a time\napp.models.register("person", Person);\n\n// or register multiple views at a time\napp.models.register({\n  person: Person,\n  friends: Friends\n});\n\nvar person = app.models.create("person");\n```\n\n#### application.models.create(modelName, properties)\n\nCreates a new, registered component\n\n- `modelName` - the registered model component name\n- `properties` - the properties to assign to the created model. \n\n```javascript\nvar Person = models.Base.extend({\n  \n});\n\napplication.models.register("person", Person);\n\nvar hello = application.models.create("person", { name: "Craig" });\n\nconsole.log(hello.name); // Craig\n```\n\n#### application.models.decorator(decorator)\n\nRegisters a model plugin. This is useful if you want to extend the functionality for each model. The implementation\nis idential to [mojo view decorators](https://github.com/mojo-js/mojo-views#applicationviewsdecoratordecorator).\n\n## Unit Testing\n\nUnit tests are very easy to write for mojo-models. Here\'s a basic example using `mocha`, and `expect.js`:\n\nView:\n\n```javascript\nvar models = require("mojo-models");\nmodule.exports = models.Base.extend({\n    bindings: {\n        "firstName, lastName": function (firstName, lastName) {\n            this.set("fullName", firstName + " " + lastName);\n        }\n    }\n});\n```\n\nUnit Test:\n\n```javascript\nvar Person = require("./person"),\nexpect = require("expect.js");\n\ndescribe(__filename + "#", function() {\n\n    var model;\n    \n    beforeEach(function() {\n        model = new Person();\n    });\n    \n    it("properly computes first / last name when changed", function () {\n        model.setProperties({\n          firstName: "A",\n          lastName: "B"\n        });\n        expect(model.get("fullName")).to.be("A B");\n    });\n});\n```\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '3c6d6f23c1bde98bc218b04397ba2b1a8e681a5d',
28 silly publish   _id: 'mojo-models@0.3.3',
28 silly publish   _shasum: 'aea5a1cc783a764a052c30a89e5c4f98a194a942',
28 silly publish   _from: '.' }
29 verbose request where is /mojo-models
30 verbose request registry http://registry.npmjs.org/
31 verbose request id dea4f04fbfc73782
32 verbose url raw /mojo-models
33 verbose url resolving [ 'http://registry.npmjs.org/', './mojo-models' ]
34 verbose url resolved http://registry.npmjs.org/mojo-models
35 verbose request where is http://registry.npmjs.org/mojo-models
36 info trying registry request attempt 1 at 09:50:44
37 http PUT http://registry.npmjs.org/mojo-models
38 http 403 http://registry.npmjs.org/mojo-models
39 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '14574',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   date: 'Sun, 12 Oct 2014 16:50:45 GMT',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   connection: 'keep-alive',
39 verbose headers   'x-served-by': 'cache-lax1427-LAX',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1413132644.891573,VS0,VE186' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.3.3
41 error old={"name":"mojo-models","version":"0.3.3","description":"mojo-models ===========","main":"./lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/mojo-js/mojo-models"},"author":"","license":"ISC","bugs":{"url":"https://github.com/classdojo/mojo-models/issues"},"homepage":"https://github.com/classdojo/mojo-models","devDependencies":{"expect.js":"^0.3.1","mocha":"^1.20.1","benchmark":"^1.0.0"},"dependencies":{"bindable":"0.6.x","frills":"0.0.x","mojo-application":"0.1.x","mojo-registered-classes":"0.0.x","lodash":"2.4.1","janitorjs":"0.0.x","bindable-decor-bindings":"0.1.x","hurryup":"0.0.x","async":"0.7.x"},"gitHead":"0799062cbf0f12cffe918f7394e9341212e5e67c","_id":"mojo-models@0.3.3","_shasum":"aea5a1cc783a764a052c30a89e5c4f98a194a942","_from":".","_npmVersion":"1.4.24","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"aea5a1cc783a764a052c30a89e5c4f98a194a942","tarball":"http://registry.npmjs.org/mojo-models/-/mojo-models-0.3.3.tgz"}}
41 error new={"name":"mojo-models","version":"0.3.3","description":"mojo-models ===========","main":"./lib/index.js","scripts":{"test":"mocha"},"repository":{"type":"git","url":"https://github.com/mojo-js/mojo-models"},"author":"","license":"ISC","bugs":{"url":"https://github.com/classdojo/mojo-models/issues"},"homepage":"https://github.com/classdojo/mojo-models","devDependencies":{"expect.js":"^0.3.1","mocha":"^1.20.1","benchmark":"^1.0.0"},"dependencies":{"bindable":"0.6.x","frills":"0.0.x","mojo-application":"0.1.x","mojo-registered-classes":"0.0.x","lodash":"2.4.1","janitorjs":"0.0.x","bindable-decor-bindings":"0.1.x","hurryup":"0.0.x","async":"0.7.x"},"readme":"[![Build Status](https://travis-ci.org/classdojo/mojo-models.svg)](https://travis-ci.org/classdojo/mojo-models)\u000a\u000aModels, like views, are plugin-based, meaning you can customize how models behave based on the properties defined in the class. You can also create your own plugins for models. By default, mojo-models come with a few: persist, virtuals, and bindings. \u000a\u000a### Installation\u000a\u000a```\u000anpm install mojo-models\u000a```\u000a\u000a### Features\u000a\u000a- easy to extend. register your own custom plugins to extend the functionality of models.\u000a\u000a### Examples\u000a\u000a- https://github.com/mojo-js/mojo-todomvc-example\u000a- [deserializing data](http://requirebin.com/?gist=d174776852d4f1a13bc4)\u000a- [loading models](http://requirebin.com/?gist=ef4c57b8004501d15447)\u000a- [collections](http://requirebin.com/?gist=516f703d3eeb719940a1)\u000a\u000a\u000a### See Also\u000a\u000a- [bindable.js](https://github.com/classdojo/bindable.js) - base class for models & collections\u000a- [mojo-application](https://github.com/mojo-js/mojo-application) - entry point to application\u000a\u000a## API\u000a\u000a### Base(properties[, [application](https://github.com/mojo-js/mojo-application)])\u000a\u000aExtends [bindable.Object](https://github.com/mojo-js/bindable.js)\u000a\u000abase model constructor\u000a\u000a- `properties` - properties to set on the model\u000a- `application` - (optional) mojo application\u000a\u000a```javascript\u000avar models = require(\"mojo-models\");\u000avar model = new models.Base({ message: \"Hello world!\" });\u000aconsole.log(model.message);\u000a```\u000a\u000a#### base.data\u000a\u000aThe raw data set on the model - this is usually transformed into something the model can \u000ause via `deserialize`. \u000a\u000a```javascript\u000avar model = new models.Base({ data: { message: \"Hello world!\" }});\u000aconsol.log(model.message); // Hello world!\u000aconsole.log(model.data); // { message: \"Hello world!\" }\u000a```\u000a\u000a#### base.deserialize(data)\u000a\u000adeserializes data once `data` is set on the model\u000a\u000aExample: http://requirebin.com/?gist=d174776852d4f1a13bc4\u000a\u000a```javascript\u000a\u000a\u000avar Person = models.Base.extend({\u000a  deserialize: (data) {\u000a    return {\u000a      firstName: data.firstName,\u000a      lastName: data.lastName,\u000a      fullName: data.firstName + \" \" + data.lastName\u000a    };\u000a  }\u000a});\u000a\u000avar person = new Person({\u000a  data: {\u000a    firstName: \"Craig\",\u000a    lastName: \"Condon\"\u000a  }\u000a});\u000a\u000aconsole.log(person.fullName); // Craig Condon\u000a\u000aperson.set(\"data\", { \u000a  firstName: \"A\",\u000a  lastName: \"B\"\u000a});\u000a\u000aconsole.log(person.fullName); // A B\u000a```\u000a\u000a#### base.serialize()\u000a\u000aserializes data. This is an alias to `toJSON`\u000a\u000a### Collection(properties[, [application](https://github.com/mojo-js/mojo-application)])\u000a\u000aExtends [bindable.Collection](https://github.com/mojo-js/bindable.js)\u000a\u000a#### collection.data\u000a\u000athe raw source for the collection. Should be an array.\u000a\u000a```javascript\u000avar Models = Collection.extend({\u000a  createModel: function (properties) {\u000a    return new models.Base(properties, this.application);\u000a  }\u000a});\u000a\u000avar models = new Models();\u000a\u000amodels.set(\"data\", [{ name: \"a\" }, { name: \"b\" }]);\u000a\u000aconsole.log(models.length); // 2\u000a```\u000a\u000a#### model collection.createModel(options)\u000a\u000aCreates a model. This method is usually defined when extending the base collection. It's also \u000acalled when deserializing each item in `data`.\u000a\u000a```javascript\u000avar Friend = models.Base.extend({\u000a});\u000a\u000avar Friends = models.Collection.extend({\u000a  createModel: function (properties) {\u000a    return new Friend(properties, this.application);\u000a  }\u000a});\u000a\u000avar friends = new Friends();\u000avar friend = friends.create({ firstName: \"John\" });\u000a\u000aconsole.log(friend.firstName); // John\u000aconsole.log(friends.length); // 1\u000a```\u000a\u000a#### model collection.create(properties)\u000a\u000acreates a new model, and adds to the collection immediately. See example above.\u000a\u000a\u000a## Built-in plugins\u000a\u000a### persist\u000a\u000aPersistence layer for models / collections. Also adds the methods `load`, `save`, and `remove`.\u000a\u000a```javascript\u000avar superagent = require(\"superagent\");\u000a\u000avar Person = models.Base.extend({\u000a  persist: {\u000a    load: function (onLoad) {\u000a      superagent.get(\"/people/\" + this._id).end(onLoad);\u000a    },\u000a    remove: function (onRemove) {\u000a      superagent.del(\"/people/\" + this._id).end(onRemove);\u000a    },\u000a    save: function (onSave) {\u000a      if (this._id) {\u000a        superagent.put(\"/people/\" + this._id).body(this.serialize()).end(onSave);\u000a      } else {\u000a        superagent.post(\"/people\").body(this.serialize()).end(onSave);\u000a      }\u000a    }\u000a  },\u000a  serialize: function () {\u000a    return {\u000a      firstName: this.firstName,\u000a      lastName: this.lastName\u000a    };\u000a  }\u000a});\u000a\u000avar person = new Person({ _id: \"person1\" });\u000a\u000aperson.set(\"firstName\", \"Craig\");\u000a\u000aperson.save(); // POST /people/person1 { firstName: \"Craig\" }\u000aperson.load(); // loads the s \u000aperson.remove(); // removes the model\u000a```\u000a\u000a#### persistable.load(onLoad)\u000a\u000acalls the `persist.load` function, and sets result to `data` to be deserialized on the model. Note that\u000aload can be called only once. Use `reload` to reload the model\u000a\u000a#### persistable.reload(onReload)\u000a\u000areloads the model\u000a\u000a#### persistable.save(onSave)\u000a\u000acalls the `persist.save` function, and sets result to `data` to be deserialized on the model.\u000a\u000a#### persistable.remove(onRemove)\u000a\u000aremoves the model\u000a\u000a#### persistable events\u000a\u000a- `willSave` - emitted when the model is about to be saved\u000a- `didSave` - emitted when the model has been saved\u000a- `willRemove` - emitted when the model is about to be removed\u000a- `didRemove` - emitted when the model has been removed\u000a\u000a\u000aremoves the model\u000a\u000a### virtuals\u000a\u000aVirtual properties all you to load external resources as they're needed. This is especially useful when\u000adata-binding models to views.\u000a\u000a\u000a```javascript\u000a\u000avar superagent = require(\"superagent\");\u000a\u000avar Friends = models.Collection.extend({\u000a\u000a  // creates a new person for each item in .data\u000a  createModel: function (options) {\u000a    return new Person(options, this.application);\u000a  },\u000a  persist: {\u000a  \u000a    // executed when .load, or .reload is called\u000a    load: function (complete) {\u000a      superagent.get(\"/person/\" + this.friendee._id + \"/friends\").end(function (err, result) {\u000a        complete(null, result);\u000a      });  \u000a    }\u000a  }\u000a});\u000a\u000avar Person = models.Base.extend({\u000a  virtuals: {\u000a  \u000a    // triggered on bind()\u000a    friends: function (onLoad) {\u000a      new Friends({ friendee: this }).load(onLoad);\u000a    }\u000a  }\u000a});\u000a\u000avar person = new Person({ _id: \"person1\" });\u000a\u000aconsole.log(person.get(\"friends\")); // should be undefined\u000a\u000a// activates virtual property, and calls /person/person1/friends API\u000aperson.bind(\"friends\", function (friends) {\u000a  this.dispose(); // dispose the binding immediately\u000a  \u000a});\u000a\u000a```\u000a\u000a### bindings\u000a\u000aBindings allow you to compute properties on models.\u000a\u000a```javascript\u000a\u000avar bindable = require(\"bindable\");\u000a\u000avar Person = models.Base.extend({\u000a  bindings: {\u000a    \"firstName, lastName\": function (firstName, lastName) {\u000a      this.set(\"fullName\", firstName + \" \"+ lastName);\u000a    }\u000a  }\u000a\u000avar person = new Person({ firstName: \"A\", lastName: \"B\" });\u000aconsole.log(person.fullName); // \u000adocument.body.appendChild(person.render());\u000a```\u000a\u000a\u000a## Application API\u000a\u000a#### views(application)\u000a\u000aregisters `mojo-models` to the [mojo-application](https://github.com/mojo-js/mojo-application), which will add a few properties\u000a/ methods onto the application.\u000a\u000a```javascript\u000avar Application = require(\"mojo-application\"),\u000amodels         = require(\"mojo-models\");\u000a\u000avar app = new Application();\u000aapp.use(models);\u000a```\u000a\u000a#### application.models.register(modelNameOrClasses[, class])\u000a\u000aRegisters a model class that's accessible anywhere in the application. \u000a\u000a`modelNameOrClasses` - view name to register, or an object of classses to register\u000a`class` - the class to register\u000a\u000a```javascript\u000a\u000avar app = new Application();\u000a\u000aapp.use(require(\"mojo-models\"));\u000a\u000a// register views one at a time\u000aapp.models.register(\"person\", Person);\u000a\u000a// or register multiple views at a time\u000aapp.models.register({\u000a  person: Person,\u000a  friends: Friends\u000a});\u000a\u000avar person = app.models.create(\"person\");\u000a```\u000a\u000a#### application.models.create(modelName, properties)\u000a\u000aCreates a new, registered component\u000a\u000a- `modelName` - the registered model component name\u000a- `properties` - the properties to assign to the created model. \u000a\u000a```javascript\u000avar Person = models.Base.extend({\u000a  \u000a});\u000a\u000aapplication.models.register(\"person\", Person);\u000a\u000avar hello = application.models.create(\"person\", { name: \"Craig\" });\u000a\u000aconsole.log(hello.name); // Craig\u000a```\u000a\u000a#### application.models.decorator(decorator)\u000a\u000aRegisters a model plugin. This is useful if you want to extend the functionality for each model. The implementation\u000ais idential to [mojo view decorators](https://github.com/mojo-js/mojo-views#applicationviewsdecoratordecorator).\u000a\u000a## Unit Testing\u000a\u000aUnit tests are very easy to write for mojo-models. Here's a basic example using `mocha`, and `expect.js`:\u000a\u000aView:\u000a\u000a```javascript\u000avar models = require(\"mojo-models\");\u000amodule.exports = models.Base.extend({\u000a    bindings: {\u000a        \"firstName, lastName\": function (firstName, lastName) {\u000a            this.set(\"fullName\", firstName + \" \" + lastName);\u000a        }\u000a    }\u000a});\u000a```\u000a\u000aUnit Test:\u000a\u000a```javascript\u000avar Person = require(\"./person\"),\u000aexpect = require(\"expect.js\");\u000a\u000adescribe(__filename + \"#\", function() {\u000a\u000a    var model;\u000a    \u000a    beforeEach(function() {\u000a        model = new Person();\u000a    });\u000a    \u000a    it(\"properly computes first / last name when changed\", function () {\u000a        model.setProperties({\u000a          firstName: \"A\",\u000a          lastName: \"B\"\u000a        });\u000a        expect(model.get(\"fullName\")).to.be(\"A B\");\u000a    });\u000a});\u000a```\u000a","readmeFilename":"README.md","gitHead":"3c6d6f23c1bde98bc218b04397ba2b1a8e681a5d","_id":"mojo-models@0.3.3","_shasum":"aea5a1cc783a764a052c30a89e5c4f98a194a942","_from":".","_npmVersion":"1.4.24","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"aea5a1cc783a764a052c30a89e5c4f98a194a942","tarball":"http://registry.npmjs.org/mojo-models/-/mojo-models-0.3.3.tgz"}}: mojo-models
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:938:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 13.4.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/craig/Developer/Public/mojo-models
46 error node -v v0.10.30
47 error npm -v 1.4.24
48 verbose exit [ 1, true ]
